/* 
 * Copyright (C) 2018 ETH Zurich and University of Bologna
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms
 * of the BSD license.  See the LICENSE file for details.
 *
 * Authors: Jonathan Boesser (jboesser@iis.ee.ethz.ch)
 */

#ifndef __ARCHI_ANALOG_CONTROL_H__
#define __ARCHI_ANALOG_CONTROL_H__

/*
 * Analog control ARCHI file for VivoSoC IPs: CONTROL_BG_BIAS_IP, CONTORL_CLK_DIV_IP, CONTORL_CLK_GEN_IP, CONTORL_PMU_IP
 * Use this file for control IPs compliant to VivoSoC3
 *
 */

/*
 * CONTROL_BG_BIAS_IP: Band-Gap and Biases
 */

// Register defines, register number according to register offset in IP
#define CONTROL_BG_BIAS_EN                      		0x00	// w
#define CONTROL_BG_BIAS_BOOST_EN                 		0x01	// w
#define CONTROL_BG_BIAS_CURRENT_EN                		0x02	// w
#define CONTROL_BG_BIAS_IP6_0V6_EN                		0x03	// w
#define CONTROL_BG_BIAS_IP6_1V2_EN                		0x04	// w
#define CONTROL_BG_BIAS_BIAS_ALL_EN                		0x05	// w
#define CONTROL_BG_BIAS_IBIAS_EXG_VREF	         		0x08	// w
#define CONTROL_BG_BIAS_IBIAS_EXG_VCM	        		0x09	// w
#define CONTROL_BG_BIAS_IBIAS_PMU                  		0x0A	// w
#define CONTROL_BG_BIAS_PGND_VALUE                 		0x0B	// w
#define CONTROL_BG_BIAS_IBIAS_STIM                 		0x0C	// w
#define CONTROL_BG_BIAS_IBIAS_PPG                  		0x0D	// w
#define CONTROL_BG_BIAS_IBIAS_PPG_1V2              		0x0E	// w
#define CONTROL_BG_BIAS_IBIAS_PGND                 		0x0F	// w
#define CONTROL_BG_BIAS_IBIAS_BIOZ                 		0x10	// w
#define CONTROL_BG_BIAS_IBIAS_BIOZ_VCM             		0x11	// w
#define CONTROL_BG_BIAS_IBIAS_BIOZ_VREF            		0x12	// w
#define CONTROL_BG_BIAS_PGND_EN                			0x15	// w

/*
 * CONTORL_CLK_DIV_IP: Clock Divider
 */

// Register defines, register number according to register offset in IP
#define CONTROL_CLK_DIV_EN_REG	                   		0x00	// rw
#define CONTROL_CLK_DIV_GLOBAL_DIV_REG            		0x01	// rw
#define CONTROL_CLK_DIV_EXG_CH_ARM                		0x02	// rw
#define CONTROL_CLK_DIV_EXG_CH_SKIP_0         			0x03	// rw
#define CONTROL_CLK_DIV_EXG_CH_SKIP_1          			0x04	// rw
#define CONTROL_CLK_DIV_EXG_CH_CHOPPING_0      			0x05	// rw
#define CONTROL_CLK_DIV_EXG_CH_CHOPPING_1      			0x06	// rw
#define CONTROL_CLK_DIV_EXG_CH_CHOPPING_2   	  		0x07	// rw
#define CONTROL_CLK_DIV_EXG_CH_WDW_TRIGGER	    		0x08	// rw
#define CONTROL_CLK_DIV_EXG_MONITOR_PAD_SEL        		0x09	// rw
#define CONTROL_CLK_DIV_BG_DIV                    		0x0A	// rw
#define CONTROL_CLK_DIV_BIOZ_AFE_DIV               		0x0B	// rw
#define CONTROL_CLK_DIV_BIOZ_CH 	        			0x0C	// rw
#define CONTROL_CLK_DIV_BIOZ_CH_WDW_TRIGGER    			0x0D	// rw
#define CONTROL_CLK_DIV_IP_CONFIG                  		0x0E	// rw
#define CONTROL_CLK_DIV_PLL_CONFIG_0               		0x0F	// rw
#define CONTROL_CLK_DIV_PLL_CONFIG_1 	        		0x10	// rw

// Bitfield defines

// clkER
#define CONTROL_CLK_DIV_EN_MASTER_OFFSET          		0x00
#define CONTROL_CLK_DIV_EN_MASTER_NBITS          		0x01

#define CONTROL_CLK_DIV_EN_EXG_SAR_OFFSET      			0x01
#define CONTROL_CLK_DIV_EN_EXG_SAR_NBITS          		0x01

#define CONTROL_CLK_DIV_EN_EXG_PHASEGEN_OFFSET     		0x02
#define CONTROL_CLK_DIV_EN_EXG_PHASEGEN_NBITS      		0x01

#define CONTROL_CLK_DIV_EN_BG_DUTY_OFFSET         		0x03
#define CONTROL_CLK_DIV_EN_BG_DUTY_NBITS           		0x01

#define CONTROL_CLK_DIV_EN_EXG_EIM_A_OFFSET        		0x04
#define CONTROL_CLK_DIV_EN_EXG_EIM_A_NBITS         		0x01

#define CONTROL_CLK_DIV_EN_EXG_EIM_D_OFFSET        		0x05
#define CONTROL_CLK_DIV_EN_EXG_EIM_D_NBITS         		0x01

#define CONTROL_CLK_DIV_EN_PPG_OFFSET             		0x06
#define CONTROL_CLK_DIV_EN_PPG_NBITS              		0x01

#define CONTROL_CLK_DIV_EN_STIM_OFFSET            		0x07
#define CONTROL_CLK_DIV_EN_STIM_NBITS              		0x01

#define CONTROL_CLK_DIV_EN_BIOZ_RX_OFFSET          		0x08
#define CONTROL_CLK_DIV_EN_BIOZ_RX_NBITS           		0x01

#define CONTROL_CLK_DIV_EN_BIOZ_TX_OFFSET          		0x09
#define CONTROL_CLK_DIV_EN_BIOZ_TX_NBITS           		0x01

#define CONTROL_CLK_DIV_EN_BIOZ_SAR_OFFSET       		0x0A
#define CONTROL_CLK_DIV_EN_BIOZ_SAR_NBITS				0x01

#define CONTROL_CLK_DIV_EN_BIOZ_PHASEGEN_OFFSET   		0x0B
#define CONTROL_CLK_DIV_EN_BIOZ_PHASEGEN_NBITS    		0x01                   

// clkGDR
#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_MASTER_OFFSET   	0x00
#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_MASTER_NBITS    	0x04

#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_EXG_SAR_OFFSET   0x04
#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_EXG_SAR_NBITS    0x04

#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_EXG_EIM_A_OFFSET 0x08
#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_EXG_EIM_A_NBITS  0x04

#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_EXG_EIM_D_OFFSET 0x0C
#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_EXG_EIM_D_NBITS  0x04

#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_PPG_OFFSET 		0x10
#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_PPG_NBITS  		0x04

#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_STIM_OFFSET 		0x14
#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_STIM_NBITS  		0x04

#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_BIOZ_OFFSET 		0x18
#define CONTROL_CLK_DIV_GLOBAL_DIV_REG_BIOZ_NBITS  		0x04

// clkCSC
// 0
#define CONTROL_CLK_DIV_EXG_CH_0_SKIP_OFFSET   			0x00
#define CONTROL_CLK_DIV_EXG_CH_0_SKIP_NBITS    			0x03

#define CONTROL_CLK_DIV_EXG_CH_1_SKIP_OFFSET   			0x04
#define CONTROL_CLK_DIV_EXG_CH_1_SKIP_NBITS    			0x03

#define CONTROL_CLK_DIV_EXG_CH_2_SKIP_OFFSET   			0x08
#define CONTROL_CLK_DIV_EXG_CH_2_SKIP_NBITS    			0x03

#define CONTROL_CLK_DIV_EXG_CH_3_SKIP_OFFSET   			0x0C
#define CONTROL_CLK_DIV_EXG_CH_3_SKIP_NBITS    			0x03

#define CONTROL_CLK_DIV_EXG_CH_4_SKIP_OFFSET   			0x10
#define CONTROL_CLK_DIV_EXG_CH_4_SKIP_NBITS    			0x03

#define CONTROL_CLK_DIV_EXG_CH_5_SKIP_OFFSET   			0x14
#define CONTROL_CLK_DIV_EXG_CH_5_SKIP_NBITS    			0x03

#define CONTROL_CLK_DIV_EXG_CH_6_SKIP_OFFSET   			0x18
#define CONTROL_CLK_DIV_EXG_CH_6_SKIP_NBITS    			0x03

#define CONTROL_CLK_DIV_EXG_CH_7_SKIP_OFFSET   			0x1C
#define CONTROL_CLK_DIV_EXG_CH_7_SKIP_NBITS    			0x03
// 1
#define CONTROL_CLK_DIV_EXG_CH_8_SKIP_OFFSET   			0x00
#define CONTROL_CLK_DIV_EXG_CH_8_SKIP_NBITS    			0x03

// clkCCC
// 0
#define CONTROL_CLK_DIV_EXG_CH_0_CHOPPING_OFFSET  		0x00
#define CONTROL_CLK_DIV_EXG_CH_0_CHOPPING_NBITS    		0x08

#define CONTROL_CLK_DIV_EXG_CH_1_CHOPPING_OFFSET  		0x08
#define CONTROL_CLK_DIV_EXG_CH_1_CHOPPING_NBITS    		0x08

#define CONTROL_CLK_DIV_EXG_CH_2_CHOPPING_OFFSET  		0x10
#define CONTROL_CLK_DIV_EXG_CH_2_CHOPPING_NBITS    		0x08

#define CONTROL_CLK_DIV_EXG_CH_3_CHOPPING_OFFSET  		0x18
#define CONTROL_CLK_DIV_EXG_CH_3_CHOPPING_NBITS    		0x08
// 1
#define CONTROL_CLK_DIV_EXG_CH_4_CHOPPING_OFFSET  		0x00
#define CONTROL_CLK_DIV_EXG_CH_4_CHOPPING_NBITS    		0x08

#define CONTROL_CLK_DIV_EXG_CH_5_CHOPPING_OFFSET  		0x08
#define CONTROL_CLK_DIV_EXG_CH_5_CHOPPING_NBITS    		0x08

#define CONTROL_CLK_DIV_EXG_CH_6_CHOPPING_OFFSET  		0x10
#define CONTROL_CLK_DIV_EXG_CH_6_CHOPPING_NBITS    		0x08

#define CONTROL_CLK_DIV_EXG_CH_7_CHOPPING_OFFSET  		0x18
#define CONTROL_CLK_DIV_EXG_CH_7_CHOPPING_NBITS    		0x08
// 2
#define CONTROL_CLK_DIV_EXG_CH_8_CHOPPING_OFFSET  		0x00
#define CONTROL_CLK_DIV_EXG_CH_8_CHOPPING_NBITS    		0x08

#define CONTROL_CLK_DIV_EXG_CH_CHOPPING_DEL_OFFSET  	0x08
#define CONTROL_CLK_DIV_EXG_CH_CHOPPING_DEL_NBITS    	0x04

// clkCWTC
#define CONTROL_CLK_DIV_EXG_CH_WDW_0_TO_7_OFFSET  		0x00
#define CONTROL_CLK_DIV_EXG_CH_WDW_0_TO_7_NBITS    		0x08

#define CONTROL_CLK_DIV_EXG_CH_WDW_8_OFFSET  			0x08
#define CONTROL_CLK_DIV_EXG_CH_WDW_8_NBITS    			0x08

#define CONTROL_CLK_DIV_EXG_GAP_WIDTH_OFFSET  			0x10
#define CONTROL_CLK_DIV_EXG_GAP_WIDTH_NBITS    			0x04

#define CONTROL_CLK_DIV_EXG_TRIGGER_DELAY_OFFSET  		0x14
#define CONTROL_CLK_DIV_EXG_TRIGGER_DELAY_NBITS    		0x06


// clkDBG
#define CONTROL_CLK_DIV_BG_DIV_OFFSET               	0x00
#define CONTROL_CLK_DIV_BG_DIV_NBITS                	0x04

#define CONTROL_CLK_DIV_BG_DUTY_CYCLE_OFFSET        	0x04
#define CONTROL_CLK_DIV_BG_DUTY_CYCLE_NBITS         	0x0E

// clkDBA
#define CONTROL_CLK_DIV_BIOZ_DIV_RX_OFFSET           	0x00
#define CONTROL_CLK_DIV_BIOZ_DIV_RX_NBITS            	0x08

#define CONTROL_CLK_DIV_BIOZ_DIV_TX_OFFSET           	0x08
#define CONTROL_CLK_DIV_BIOZ_DIV_TX_NBITS            	0x08

// clkSBC
#define CONTROL_CLK_DIV_BIOZ_CH_SEL_OFFSET      		0x00
#define CONTROL_CLK_DIV_BIOZ_CH_SEL_NBITS       		0x09

#define CONTROL_CLK_DIV_BIOZ_GAP_WIDTH_OFFSET       	0x0C
#define CONTROL_CLK_DIV_BIOZ_GAP_WIDTH_NBITS        	0x04

#define CONTROL_CLK_DIV_BIOZ_CONV_MODE_OFFSET       	0x10
#define CONTROL_CLK_DIV_BIOZ_CONV_MODE_NBITS        	0x02

#define CONTROL_CLK_DIV_BIOZ_TRIGGER_WIDTH_OFFSET   	0x00
#define CONTROL_CLK_DIV_BIOZ_TRIGGER_WIDTH_NBITS    	0x14

// clkSBW
#define CONTROL_CLK_DIV_BIOZ_CH_WDW_OFFSET          	0x00
#define CONTROL_CLK_DIV_BIOZ_CH_WDW_NBITS           	0x10

#define CONTROL_CLK_DIV_BIOZ_TRIGGER_DELAY_OFFSET   	0x10
#define CONTROL_CLK_DIV_BIOZ_TRIGGER_DELAY_NBITS    	0x06

#define CONTROL_CLK_DIV_BIOZ_TRACK_DELAY_OFFSET     	0x18
#define CONTROL_CLK_DIV_BIOZ_TRACK_DELAY_NBITS      	0x06

// clkIPC (including clkMPS)
#define CONTROL_CLK_DIV_IP_CONFIG_SEL_OUT_STRENGTH_OFFSET 0x00
#define CONTROL_CLK_DIV_IP_CONFIG_SEL_OUT_STRENGTH_NBITS 0x05

#define CONTROL_CLK_DIV_IP_CONFIG_TAO_SEL_XO32K_OFFSET 	0x08
#define CONTROL_CLK_DIV_IP_CONFIG_TAO_SEL_XO32K_NBITS 	0x01

#define CONTROL_CLK_DIV_IP_CONFIG_TAO_SEL_XO16M_OFFSET 	0x09
#define CONTROL_CLK_DIV_IP_CONFIG_TAO_SEL_XO16M_NBITS 	0x01

#define CONTROL_CLK_DIV_IP_CONFIG_TAO_SEL_PLL_OFFSET 	0x0A
#define CONTROL_CLK_DIV_IP_CONFIG_TAO_SEL_PLL_NBITS 	0x01

#define CONTROL_CLK_DIV_IP_CONFIG_CLK_SEL_XO32K_OFFSET 	0x0C
#define CONTROL_CLK_DIV_IP_CONFIG_CLK_SEL_XO32K_NBITS 	0x01

#define CONTROL_CLK_DIV_IP_CONFIG_CLK_SEL_XO16M_OFFSET 	0x0D
#define CONTROL_CLK_DIV_IP_CONFIG_CLK_SEL_XO16M_NBITS 	0x01

#define CONTROL_CLK_DIV_IP_CONFIG_CLK_SEL_PLL_OFFSET 	0x0E
#define CONTROL_CLK_DIV_IP_CONFIG_CLK_SEL_PLL_NBITS 	0x01

#define CONTROL_CLK_DIV_IP_CONFIG_LINE_SEL_OFFSET 		0x10
#define CONTROL_CLK_DIV_IP_CONFIG_LINE_SEL_NBITS 		0x06

// clkPLL
//0
#define CONTROL_CLK_DIV_PLL_CONFIG_DAC_SPI_IN_OFFSET 	0x00
#define CONTROL_CLK_DIV_PLL_CONFIG_DAC_SPI_IN_NBITS 	0x0B

//1
#define CONTROL_CLK_DIV_PLL_CONFIG_SOFT_RESET_OFFSET 	0x00
#define CONTROL_CLK_DIV_PLL_CONFIG_SOFT_RESET_NBITS 	0x01

#define CONTROL_CLK_DIV_PLL_CONFIG_EN_OFFSET 			0x01
#define CONTROL_CLK_DIV_PLL_CONFIG_EN_NBITS 			0x01

#define CONTROL_CLK_DIV_PLL_CONFIG_INT_EN_OFFSET 		0x02
#define CONTROL_CLK_DIV_PLL_CONFIG_INT_EN_NBITS 		0x01

#define CONTROL_CLK_DIV_PLL_CONFIG_DPPL_EN_OFFSET 		0x03
#define CONTROL_CLK_DIV_PLL_CONFIG_DPPL_EN_NBITS 		0x01

#define CONTROL_CLK_DIV_PLL_CONFIG_SD_EN_OFFSET 		0x04
#define CONTROL_CLK_DIV_PLL_CONFIG_SD_EN_NBITS 			0x01

#define CONTROL_CLK_DIV_PLL_CONFIG_VCO_FREQ_SEL_OFFSET 	0x05
#define CONTROL_CLK_DIV_PLL_CONFIG_VCO_FREQ_SEL_NBITS 	0x01

#define CONTROL_CLK_DIV_PLL_CONFIG_FREQ_CONTROL_OFFSET 	0x08
#define CONTROL_CLK_DIV_PLL_CONFIG_FREQ_CONTROL_NBITS 	0x0C

#define CONTROL_CLK_DIV_PLL_CONFIG_PROP_LOOP_GAIN_OFFSET 0x14
#define CONTROL_CLK_DIV_PLL_CONFIG_PROP_LOOP_GAIN_NBITS 0x04

#define CONTROL_CLK_DIV_PLL_CONFIG_INT_LOOP_GAIN_OFFSET 0x18
#define CONTROL_CLK_DIV_PLL_CONFIG_INT_LOOP_GAIN_NBITS 	0x03

#define CONTROL_CLK_DIV_PLL_CONFIG_DIRECT_GAIN_OFFSET 	0x1B
#define CONTROL_CLK_DIV_PLL_CONFIG_DIRECT_GAIN_NBITS 	0x01

#define CONTROL_CLK_DIV_PLL_CONFIG_CYCLE_WIDTH_OFFSET 	0x1C
#define CONTROL_CLK_DIV_PLL_CONFIG_CYCLE_WIDTH_NBITS 	0x04


/*
 * CONTORL_CLK_GEN_IP: Clock Generator
 */

// Register defines, register number according to register offset in IP
#define CONTROL_CLK_GEN_REG                    		0x00

// Bitfield defines 

// ClockGeneratorIP4
#define CONTROL_CLK_GEN_DCXO_BIAS_OFFSET			0x00
#define CONTROL_CLK_GEN_DCXO_BIAS_NBITS				0x06

#define CONTROL_CLK_GEN_XTAL_BIAS_OFFSET			0x06
#define CONTROL_CLK_GEN_XTAL_BIAS_NBITS				0x02

#define CONTROL_CLK_GEN_FILT_OFFSET					0x08
#define CONTROL_CLK_GEN_FILT_NBITS					0x01

#define CONTROL_CLK_GEN_RESET_N_OFFSET 				0x09
#define CONTROL_CLK_GEN_RESET_N_NBITS 				0x01

#define CONTROL_CLK_GEN_PD_DCXO_OFFSET 				0x0A
#define CONTROL_CLK_GEN_PD_DCXO_NBITS 				0x01

#define CONTROL_CLK_GEN_CLK_EN_OFFSET 				0x0B
#define CONTROL_CLK_GEN_CLK_EN_NBITS 				0x01

#define CONTROL_CLK_GEN_CLK_FORWARD_OFFSET 			0x0C
#define CONTROL_CLK_GEN_CLK_FORWARD_NBITS 			0x01

#define CONTROL_CLK_GEN_PD_DIGITAL_OFFSET 			0x0D
#define CONTROL_CLK_GEN_PD_DIGITAL_NBITS 			0x01

#define CONTROL_CLK_GEN_PD_BIAS_OFFSET 				0x0E
#define CONTROL_CLK_GEN_PD_BIAS_NBITS 				0x01

#define CONTROL_CLK_GEN_RESERVED_OFFSET 			0x0F
#define CONTROL_CLK_GEN_RESERVED_NBITS 				0x01


/*
 * CONTORL_PMU_IP: PMU
 */

// Register defines, register number according to register offset in IP
#define CONTROL_PMU_LDO_CONFIG_REG_0               	0x0E	// rw
#define CONTROL_PMU_LDO_CONFIG_REG_1                0x0F	// rw
#define CONTROL_PMU_LDO_CONFIG_REG_2               	0x10	// rw
#define CONTROL_PMU_POWER_SWITCH_REG               	0x11	// rw

// Bitfield defines

// pmuLCR
// 0
#define CONTROL_PMU_D_1V2_LOW_C_OFFSET             	0x02       
#define CONTROL_PMU_D_1V2_LOW_C_NBITS              	0x01

#define CONTROL_PMU_EXG_1V2_EN_OFFSET				0x04
#define CONTROL_PMU_EXG_1V2_EN_NBITS				0x01

#define CONTROL_PMU_EXG_1V2_OUT_EN_OFFSET			0x05
#define CONTROL_PMU_EXG_1V2_OUT_EN_NBITS			0x01

#define CONTROL_PMU_EXG_1V2_LOW_C_OFFSET			0x06
#define CONTROL_PMU_EXG_1V2_LOW_C_NBITS				0x01

#define CONTROL_PMU_EXG_3V3_EN_OFFSET				0x08
#define CONTROL_PMU_EXG_3V3_EN_NBITS				0x01

#define CONTROL_PMU_EXG_3V3_VOUT_HIGH_OFFSET		0x09
#define CONTROL_PMU_EXG_3V3_VOUT_HIGH_NBITS			0x01

#define CONTROL_PMU_BIOZ_1V2_EN_OFFSET				0x0C
#define CONTROL_PMU_BIOZ_1V2_EN_NBITS				0x01

#define CONTROL_PMU_BIOZ_1V2_OUT_EN_OFFSET			0x0D
#define CONTROL_PMU_BIOZ_1V2_OUT_EN_NBITS			0x01

#define CONTROL_PMU_BIOZ_1V2_LOW_C_OFFSET			0x0E
#define CONTROL_PMU_BIOZ_1V2_LOW_C_NBITS			0x01
// 1
#define CONTROL_PMU_PPG_1V2_EN_OFFSET				0x00
#define CONTROL_PMU_PPG_1V2_EN_NBITS				0x01

#define CONTROL_PMU_PPG_1V2_OUT_EN_OFFSET			0x01
#define CONTROL_PMU_PPG_1V2_OUT_EN_NBITS			0x01

#define CONTROL_PMU_PPG_1V2_LOW_C_OFFSET			0x02
#define CONTROL_PMU_PPG_1V2_LOW_C_NBITS				0x01

#define CONTROL_PMU_PPG_3V3_EN_OFFSET				0x04
#define CONTROL_PMU_PPG_3V3_EN_NBITS				0x01

#define CONTROL_PMU_PPG_3V3_VOUT_HIGH_OFFSET		0x05
#define CONTROL_PMU_PPG_3V3_VOUT_HIGH_NBITS			0x01

#define CONTROL_PMU_STIM_1V2_EN_OFFSET				0x08
#define CONTROL_PMU_STIM_1V2_EN_NBITS				0x01

#define CONTROL_PMU_STIM_1V2_OUT_EN_OFFSET			0x09
#define CONTROL_PMU_STIM_1V2_OUT_EN_NBITS			0x01

#define CONTROL_PMU_STIM_1V2_LOW_C_OFFSET			0x0A
#define CONTROL_PMU_STIM_1V2_LOW_C_NBITS			0x01

#define CONTROL_PMU_STIM_3V3_EN_OFFSET				0x0C
#define CONTROL_PMU_STIM_3V3_EN_NBITS				0x01

#define CONTROL_PMU_STIM_3V3_VOUT_HIGH_OFFSET		0x0D
#define CONTROL_PMU_STIM_3V3_VOUT_HIGH_NBITS		0x01
// 2
#define CONTROL_PMU_CLK_1V2_EN_OFFSET				0x00
#define CONTROL_PMU_CLK_1V2_EN_NBITS				0x01

#define CONTROL_PMU_CLK_1V2_OUT_EN_OFFSET			0x01
#define CONTROL_PMU_CLK_1V2_OUT_EN_NBITS			0x01

#define CONTROL_PMU_CLK_1V2_LOW_C_OFFSET			0x02
#define CONTROL_PMU_CLK_1V2_LOW_C_NBITS				0x01

#define CONTROL_PMU_CAL_RES_SEL_OFFSET				0x04
#define CONTROL_PMU_CAL_RES_SEL_NBITS				0x02

// pmuPWS
#define CONTROL_PMU_EXG_PWR_SEL_OFFSET				0x00
#define CONTROL_PMU_EXG_PWR_SEL_NBITS				0x02

#define CONTROL_PMU_PPG_PWR_SEL_OFFSET				0x04
#define CONTROL_PMU_PPG_PWR_SEL_NBITS				0x02

#define CONTROL_PMU_BIOZ_PWR_SEL_OFFSET				0x08
#define CONTROL_PMU_BIOZ_PWR_SEL_NBITS				0x02

#define CONTROL_PMU_STIM_PWR_SEL_OFFSET				0x0C
#define CONTROL_PMU_STIM_PWR_SEL_NBITS				0x02

#else
#error Archi file for VivoSoC/Control already included
#endif		// __ARCHI_ANALOG_CONTROL_H__
